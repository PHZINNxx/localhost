#!/bin/bash

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
CADDYFILE="$SCRIPT_DIR/Caddyfile"

add_subdomain() {
    local subdomain=$1
    local port=$2
    
    cat >> $CADDYFILE << EOF

$subdomain.localhost {
	reverse_proxy localhost:$port
	tls internal
	encode gzip zstd
}
EOF

    echo "Added configuration for $subdomain.localhost pointing to localhost:$port"
}

remove_by_name() {
    local subdomain=$1
    
    sed -i "/^$subdomain\.localhost {/,/^}/d" $CADDYFILE
    echo "Removed configuration for $subdomain.localhost"
}

remove_by_port() {
    local port=$1
    local subdomain
    
    # Find subdomain matching this port
    subdomain=$(grep -B1 "reverse_proxy localhost:$port" $CADDYFILE | grep -o '[^ ]*\.localhost' | sed 's/\.localhost//')
    
    if [ -n "$subdomain" ]; then
        remove_by_name "$subdomain"
    else
        echo "No configuration found for port $port"
    fi
}

reload_caddy() {
   if pgrep -x "caddy" > /dev/null; then
       echo "Reloading Caddy configuration..."
       caddy reload --config "$CADDYFILE"
   else
       echo "Starting Caddy..."
       caddy start --config "$CADDYFILE"
   fi
}

case "$1" in
    add)
        if [ $# -ne 3 ]; then
            echo "Usage: $(basename $0) add <subdomain> <port>"
            exit 1
        fi
        add_subdomain "$2" "$3"
        reload_caddy
        ;;
    remove)
        if [ $# -ne 2 ]; then
            echo "Usage: $(basename $0) remove <subdomain or port>"
            exit 1
        fi
        # Check if the argument is a number (port) or string (subdomain)
        if [[ "$2" =~ ^[0-9]+$ ]]; then
            remove_by_port "$2"
        else
            remove_by_name "$2"
        fi
        reload_caddy
        ;;
    *)
        echo "Usage: $(basename $0) add <subdomain> <port>"
        echo "       $(basename $0) remove <subdomain or port>"
        exit 1
        ;;
esac
